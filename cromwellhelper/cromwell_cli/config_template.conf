include required(classpath("application"))

webservice {
  port = {{port}}
  interface = {{interface}}
}

call-caching {
  enabled = {{call_cache}}
}

system {
  file-hash-cache = {{file_hash_cache}}
}

services {
  HealthMonitor {
    config {
      check-dockerhub = false
    }
  }
}

database {
  {{#mysql}}
  profile = "slick.jdbc.MySQLProfile$"
  db {
    driver = "com.mysql.cj.jdbc.Driver"
    url = "jdbc:mysql://{{mysql_server}}:{{mysql_port}}/{{mysql_database}}?rewriteBatchedStatements=true&useSSL=false"
    user = "{{mysql_user}}"
    password = "{{mysql_password}}"
    connectionTimeout = 5000
  }
  {{/mysql}}
  {{^mysql}}
  profile = "slick.jdbc.HsqldbProfile$"
  db {
    driver = "org.hsqldb.jdbcDriver"
    url = """
    jdbc:hsqldb:file:{{hsql_path}};
    shutdown=false;
    hsqldb.default_table_type=cached;hsqldb.tx=mvcc;
    hsqldb.result_max_memory_rows=10000;
    hsqldb.large_data=true;
    hsqldb.applog=1;
    hsqldb.lob_compressed=true;
    hsqldb.script_format=3
    """
    connectionTimeout = 120000
    numThreads = 1
  }
  {{/mysql}}
}

docker {
  hash-lookup {
    method = "{{docker_hash_lookup}}"
  }
}


backend {
  default = "{{default_backend}}"

  providers {
    Local {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
    }

  
    SGE {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        filesystems {
          local {
            localization: [
              "soft-link"
            ]
            caching {
              duplication-strategy: [
                "soft-link"
              ]
              hashing-strategy = "path+modtime"
            }
          }
        }


        runtime-attributes = """
          Int cpu = 1
          Float memory_gb = 4
          String? docker
        """

        submit = """
          qsub \
          -terse \
          -V \
          -b y \
          -N ${job_name} \
          -wd ${cwd} \
          -o ${out} \
          -e ${err} \
          -pe def_slot ${cpu} \
          -v JAVA_TOOL_OPTIONS="-XX:+UseSerialGC -XX:CICompilerCount=2" \
          ${"-l mem_req=" + memory_gb + "G,s_vmem=" + memory_gb + "G"} \
          /usr/bin/env bash ${script}
        """

        submit-docker = """
          set -xe
          MEM_G_PER_CORE=`echo 'scale=3; ${memory_gb}/${cpu}'|bc`G

          qsub \
          -terse \
          -V \
          -b y \
          -N ${job_name} \
          -wd ${cwd} \
          -o ${out} \
          -e ${err} \
          -pe def_slot ${cpu} \
          -v JAVA_TOOL_OPTIONS="-XX:+UseSerialGC -XX:CICompilerCount=2" \
          -l mem_req=$MEM_G_PER_CORE,s_vmem=$MEM_G_PER_CORE -soft -l lmem,lljob,ljob,sjob \
          docker run-with-cromwell --workdir "${cwd}" --docker-workdir "${docker_cwd}" --jobshell ${job_shell} --script ${script} --image-name ${docker}
        """
        
        exit-code-timeout-seconds = 120
        job-id-regex = "(\\d+)"
        kill = "qdel ${job_id}"
        kill-docker = "qdel ${job_id}"
        check-alive = "qstat -j ${job_id}"
        concurrent-job-limit = 2000
      }
    }
  }
}
